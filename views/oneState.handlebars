   <!doctype html>
   <!--<p>{{data}}</p>
		<p>Testing</p>-->
	
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
	<script type="text/javascript" src="javascript/states.js"></script>
	<script type="text/javascript" src="javascript/useful_function.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script type="text/javascript">
	var beaches;
    var sortBy;
    var myMap;
    var selectedMarker = null;
    var min            = new Object();
    var max            = new Object();

    min.episodes = 999999999;
    max.episodes = 0;
    min.cost     = 999999999;
    max.cost     = 0;
    min.volume   = 999999999;
    max.volume   = 0;

    var totals  = new Object();

    totals.cost     = 0;
    totals.episodes = 0;
    totals.volume   = 0;
    totals.len      = 0;
    totals.cost2010 = 0;
      // Load the Visualization API and the piechart package.
      google.load('visualization', '1', {'packages':['corechart']});

    google.setOnLoadCallback(initialize);

    /**
     * The information window that will pop up when a marker is clicked.
     * There is only one so that only one window can ever be displayed at a
     * time.
     */
    var infoWindow = new google.maps.InfoWindow();

    /**
     * The array that contains all the markers that are displayed on the map.
     * They are in this format because, this way, you can simply loop through
     * the array and add or remove each marker from the map.
     */
    var markers    = new Array();

    /**
     * The function that is called as soon as the Google Visualization library
     * is loaded.  This function determines what state has been clicked by
     * recieveing the 'state' variable in the jsp and then creates a query
     * using the state.
     */
	 
    function initialize() {
        //var state = creatDownloadUrl();
		var state = "{{state}}";
		var fullStateName = "{{fullStateName}}";
		//alert("Initials->" + state);
		//alert("Full name->" + fullStateName);
        var query = new google.visualization.Query(createDataUrl("Master"));
        query.setQuery("Select A, D, E, H, I, J, L Where B = '" + state
                       + "' Order By A");
        query.send(queryResponse);
    }

    /**
     * This function is activated when a query.send function is called with
     * this function being passed as the parameter. It checks which radio
     * button has been selected (the Sort by button) and then draws the map
     * accordingly.
     *
     * @param response the query response that is created from the query
     */
    function queryResponse(response) {
		//alert("In Callback");
        if (response.isError()) {
            alert("Error in query: " + response.getMessage() + " " +
                  response.getDetailedMessage());
            return;
        }

		beaches = new Object();
		
        var data = response.getDataTable();
		var cols = data.getNumberOfColumns();
		var rows = data.getNumberOfRows();
		//alert("Number of columns: " + cols);
		//alert("Number of rows: " + rows);

		populateBeachesAndTotals(data);
		writeValuesToPage();
		
		//new stuff
		var select  = document.getElementById('beaches');
        var options = select.getElementsByTagName('option');
		//end new stuff
		
		for (beach in beaches) {
            var option = document.createElement('option');
            option.id    = beach;
            option.text  = beach;
            option.value = beach;
            select.appendChild(option);
        }
		

    }
	
	
	/**
     * Creates the array of beaches that contains all the information about
     * each beach (cost, episodes, etc.). This method loops through the data
     * recieved from the query and instantiates the values in an array for use
     * later.
     *
     * @param data a data table containing the data recieved from a query
     */
    function populateBeachesAndTotals(data) {
		//alert("in");
        var latitudeColumn  = 1;
        var longitudeColumn = 2;
        var lengthColumn    = 3;
        var volumeColumn    = 4;
        var costColumn      = 5;
        var cost2010Column  = 6;
		
        for (var i = 0; i < data.getNumberOfRows(); i++) {
			//alert(i);
            //var index = trim(data.getValue(i, 0));
			var index = data.getValue(i, 0).trim();
            if (beaches[index] == undefined) {
				//alert("if");
                beaches[index] = new Object();
                beaches[index].beach     = index;
                beaches[index].episodes  = 1;
                beaches[index].latitude  = data.getValue(i, 
                                                         latitudeColumn);
                beaches[index].longitude = data.getValue(i, 
                                                         longitudeColumn);
                beaches[index].cost      = data.getValue(i, costColumn);
                beaches[index].volume    = data.getValue(i, volumeColumn);
                beaches[index].len       = data.getValue(i, lengthColumn);
                beaches[index].cost2010  = data.getValue(i, cost2010Column);
            } else {
				//alert("Not undef");
                beaches[index].episodes++;
                beaches[index].cost     += data.getValue(i, costColumn);
                beaches[index].volume   += data.getValue(i, volumeColumn);
                beaches[index].len      += data.getValue(i, lengthColumn);
                beaches[index].cost2010 += data.getValue(i, cost2010Column);
            }
        }
        jQuery.each(beaches, function() {
            if (this.episodes < min.episodes) {
                min.episodes = this.episodes;
            }
            if (this.episodes > max.episodes) {
                max.episodes = this.episodes;
            }
            if (this.cost < min.cost) {
                min.cost = this.cost;
            }
            if (this.cost > max.cost) {
                max.cost = this.cost;
            }
            if (this.volume < min.volume) {
                min.volume = this.volume;
            }
            if (this.volume > max.volume) {
                max.volume = this.volume;
            }
            totals.cost     += this.cost;
            totals.episodes += this.episodes;
            totals.volume   += this.volume;
            totals.len      += this.len;
            totals.cost2010 += this.cost2010;
        });
    }
	/**
     * Writes the values that were calculated from the data retrieved from the
     * query to the page. This function gets the totals for the different
     * parameters of the beaches and the minimum and maximum of each parameter
     * anf then writes them to the appropriate point on the page.
     */
	function writeValuesToPage() {
        document.getElementById('total_episodes').value = 
                                           numberWithCommas(totals.episodes);
        document.getElementById('total_cost').value = '$' 
                                           + numberWithCommas(
                                           Math.round(totals.cost));
        document.getElementById('total_2010cost').value = '$' 
                                           + numberWithCommas(
                                           Math.round(totals.cost2010));
        document.getElementById('total_volume').value = 
                                           numberWithCommas(
                                           Math.round(totals.volume));
        document.getElementById('total_length').value = 
                                           numberWithCommas(
                                           Math.round(totals.len));
        document.getElementById('totals').style.visibility = 'visible';
        alert("after printing");
        var value = sortBy.toLowerCase();
        var minText;
        var maxText;
		alert("way before");
        if (value == 'cost') {
            minText = 'Min ' + sortBy + ': $'
                      + numberWithCommas(min[value]);
            maxText = 'Max ' + sortBy + ': $'
                            + numberWithCommas(max[value]);
        } else {
            minText = 'Min ' + sortBy + ': '
                      + numberWithCommas(min[value]);
            maxText = 'Max ' + sortBy + ': '
                            + numberWithCommas(max[value]);
        }
		alert("before");
        document.getElementById('min').value   = minText;
        document.getElementById('max').value   = maxText;
		alert("after");
        document.getElementById('heatkey').style.visibility = 'visible';
        document.getElementById('key_img').style.visibility = 'visible';

        var valueLength;
        var valueWidth = document.getElementById('max').value + '';

        if (valueWidth.substr(4, 4) == "Cost") {
            valueLength = valueWidth.length - 1;
        } else {
            valueLength = valueWidth.length;
        }

        var newWidth = 280 - (valueLength * 7);
        newWidth += 'px';

        var div = document.getElementById('maxDiv');
        div.style.left = newWidth;
    }
	</script>
		
  <tr align="center">
   <td>
	<select name="beaches" id="beaches" onChange="moveMap(this.options[this.selectedIndex].value);">
        <option value="<?php echo $state; ?>">Bob</option>
        <option value="<?php echo $state; ?>">View the original map</option>
    </select>
	<hr size="3" width="100%"/>
	
	<table cols="3" id="totals" style="visibility: hidden;">
              <tr>
                <td align="right">
                  <b>State Totals:</b>
                </td>
                <td width="150px">
                  <font size="2px">Episodes:</font>
                </td>
                <td align="left">
                  <input type="text" id="total_episodes" class="textBox totals" 
                         style="font-size: 12px; text-align: right;" 
                         size="20" readonly />
                </td>
              </tr>
              <tr>
                <td>
                </td>
                <td>
                  <font size="2px">Cost:</font>
                </td>
                <td align="left">
                  <input type="text" id="total_cost" class="textBox totals" 
                         style="font-size: 12px; text-align: right;" 
                         size="20" readonly />
                </td>
              </tr>
              <tr>
                <td>
                </td>
                <td>
                  <font size="2px">Cost (in 2014 dollars):</font>
                </td>
                <td align="left">
                  <input type="text" id="total_2010cost" class="textBox totals" 
                         style="font-size: 12px; text-align: right;" 
                         size="20" readonly />
                </td>
              </tr>
              <tr>
                <td>
                </td>
                <td>
                  <font size="2px">Volume (cubic yards):</font>
                </td>
                <td align="left">
                  <input type="text" id="total_volume" class="textBox totals" 
                         style="font-size: 12px; text-align: right;" 
                         size="20" readonly />
                </td>
              </tr>
              <tr>
                <td>
                </td>
                <td>
                  <font size="2px">Length (feet):</font>
                </td>
                <td align="left">
                  <input type="text" id="total_length" class="textBox totals" 
                         style="font-size: 12px; text-align: right;" 
                         size="20" readonly />
                </td>
              </tr>
            </table>
			<div id="heatkey" class="eastkey" style="visibilty: hidden;">
				<div id="minDiv" class="min">
				<input id="min" type="text" class="textBox" size="35" readonly style="font-weight: bold;" />
			</div>
			<div id="maxDiv" class="max">
				<input id="max" type="text" class="textBox" size="35" readonly style="font-weight: bold;" />
        </div>
        <br />
        <div class="heat-img">
          <!--<img id="key_img" alt="heat_key" src="images/heat_key.png" style="visibility: hidden; border-width: 0px;" />-->
        </div>
      </div>
   </td>
  </tr>
